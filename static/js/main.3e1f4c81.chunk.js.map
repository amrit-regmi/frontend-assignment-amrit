{"version":3,"sources":["Utils/dateHelper.ts","Reducer/reducer.ts","Context/DataProvider.tsx","Components/Calender/DateCell.tsx","Context/useDataProvider.ts","Reducer/actions.ts","Components/Calender/WeekRow.tsx","Components/Calender/index.tsx","Components/Header.tsx","App.tsx","index.tsx"],"names":["getDaysInMonth","month","year","Date","getDate","getFirstDayOfMonth","day","getDay","getDayNumber","date","isDateEqual","date1","date2","getFullYear","getMonth","ADD_TO_CALENDER","addToCalender","calender","payload","dateIndex","Array","i","length","data","JSON","stringify","reducer","state","action","type","initialState","Object","assign","StoreContext","createContext","DataProvider","children","useReducer","dispatch","memoisedStore","useMemo","Provider","value","DateCell","useContext","useEffect","treatmentWeekNumber","prependDays","Math","trunc","getTreatmentWeekNumber","weeklyData","forEach","weekday","indexOf","toUpperCase","today","completed","getTime","updateToCalender","istoday","isToday","className","title","toLocaleUpperCase","WeekRow","startDate","startDay","dates","map","index","newDate","Calender","currentMonth","currentYear","weekStartDate","weeks","firstDay","cellsVisbleinCalender","ceil","getTotalWeekSpanForMonth","weekData","setDate","week","Header","App","params","useParams","parseInt","ReactDOM","render","StrictMode","exact","path","component","document","getElementById"],"mappings":"s9BAOaA,EAAiB,SAACC,EAAmBC,GAEhD,OADgB,IAAIC,KAAKD,EAAKD,EAAM,EAAE,GACvBG,WAQJC,EAAqB,SAACJ,EAAkBC,GACnD,IACMI,EADU,IAAIH,KAAKD,EAAKD,EAAM,GAChBM,SAAU,EAC9B,OAAY,IAARD,EAAkB,EACfA,GAOIE,EAAe,SAACC,GAC3B,IAAMH,EAAMG,EAAKF,SAAU,EAC3B,OAAY,IAARD,EAAkB,EACfA,GAwCII,EAAc,SAACC,EAAWC,GACrC,OAAKD,aAAiBR,MAAQS,aAAiBT,OAC5CQ,EAAME,gBAAkBD,EAAMC,eAAiBF,EAAMG,aAAeF,EAAME,YAAcH,EAAMP,YAAcQ,EAAMR,Y,QCvE1GW,EAAkB,kBAEzBC,EAAgB,SAACC,EAAmBC,GAExC,IAAMhB,EAAQgB,EAAQT,KAAKI,cACrBZ,EAAQiB,EAAQT,KAAKK,WAErBK,EADOD,EAAQT,KAAKL,UACH,EAGnBa,EAASf,KAAOe,EAASf,GAAQ,IACjCe,EAASf,GAAMD,KAASgB,EAASf,GAAMD,GAAf,YAA4B,IAAImB,MAAMpB,EAAeC,EAAMC,MAEvF,IAAI,IAAImB,EAAGF,EAAWE,GAAKJ,EAASf,GAAMD,GAAOqB,OAAQD,IAAK,CAE5D,IAAIJ,EAASf,GAAMD,GAAOoB,GAAG,CAC3BJ,EAASf,GAAMD,GAAOoB,GAAKH,EAAQK,KACnC,MAGF,GAAGC,KAAKC,UAAUR,EAASf,GAAMD,GAAOoB,MAAQG,KAAKC,UAAUP,EAAQK,MACrE,MAIJ,OAAON,GAWMS,EARC,SAACC,EAAcC,GAC7B,OAAOA,EAAOC,MACd,KAAKd,EACH,OAAO,YAAC,eAAKY,GAAb,IAAoBV,SAAUD,EAAc,eAAKW,EAAMV,UAAYW,EAAOV,WAC5E,QACE,OAAOS,I,eC1BLG,EAAqD,CAAEb,SAAU,GAAKM,KAF1DQ,OAAOC,OAAOT,EADA,KAKnBU,EAAeC,wBAAiD,CAC3EJ,EACA,kBAAMA,KAKKK,EAAmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACtBC,qBAAaX,EAASI,GADA,mBACzCH,EADyC,KAClCW,EADkC,KAE1CC,EAAgBC,mBAAuB,iBAAM,CAACb,EAAOW,KAAW,CAACX,IACvE,OACE,cAACM,EAAaQ,SAAd,CAAuBC,MAAQH,EAA/B,SACGH,KCyBQO,EA1C0B,SAAC,GAAc,IAAZlC,EAAW,EAAXA,KAAW,ECFlBmC,qBAAWX,GDEO,mBAC9CN,EAD8C,KACxCW,EADwC,KAGrDO,qBAAU,WACR,GAAIpC,EAAJ,CAGA,IAAMqC,EHuE4B,SAACrC,GACrC,IACMsC,EADgB1C,EAAmBI,EAAKK,WAA0BL,EAAKI,gBACxC,EAErC,OADYmC,KAAKC,OAAOF,EAAatC,EAAKL,WAAW,GG1EvB8C,CAAuBzC,GAC7C0C,EACJxB,EAAK,MACLA,EAAK,KAAS,OAAOmB,GAEpBK,GAAc1C,GACf0C,EAAWC,SAAS,SAAA7B,GH0CY,IAACjB,KGzCJiB,EAAK8B,QH0CzB,CAAC,SAAW,UAAY,YAAc,WAAa,SAAW,WAAa,UAC5EC,QAAQhD,EAAIiD,iBG3CkC/C,EAAaC,KAGjE6B,EEfwB,SAAC7B,EAAUc,GACzC,IAAMiC,EAAO,IAAIrD,KACXe,EAAyB,CAAET,OAAKc,QAMtC,OALIA,EAAKkC,WAAahD,EAAKiD,UAAYF,EAAME,WAAajD,EAAKK,aAAe0C,EAAM1C,YAAeL,EAAKI,gBAAkB2C,EAAM3C,gBAG9HK,EAAQT,KAAO+C,GAET,CACN3B,KAAKd,EACLG,QAASA,GFKIyC,CAAiBlD,EAAKc,UAInC,CAACd,IAEH,IAAMc,EAAOd,GACRkB,EAAK,SAAalB,EAAKI,gBACvBc,EAAK,SAAalB,EAAKI,eAAeJ,EAAKK,aAC3Ca,EAAK,SAAalB,EAAKI,eAAeJ,EAAKK,YAA2BL,EAAKL,UAAU,GAEpFwD,EHiBe,SAACnD,GACtB,IAAM+C,EAAQ,IAAIrD,KAClB,OAAOO,EAAY8C,EAAM/C,GGnBToD,CAAQpD,GAExB,OACE,oBAAIqD,UAAS,mBAAgBF,EAAS,gBAAiB,GAA1C,YAAgDrC,EAAK,sBAAsB,IAAxF,SACGd,GACD,gCACE,6BAAMA,EAAKL,YACX,oBAAI0D,UAAcF,EAAuB,QAAd,YAA3B,SAAmDrC,GAAQA,EAAKwC,MAAMC,4BGN/DC,EA/BsB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEhCC,EAAW3D,EAAa0D,GAGxBE,EAAQ,YAAIhD,MAAM,IAAIiD,KAAI,SAAC5D,EAAK6D,GACpC,IAAMC,EAAU,IAAIpE,KAAK+D,EAAUrD,cAAeqD,EAAUpD,WAAYoD,EAAU9D,UAAUkE,EAAMH,GAGlG,OAAGI,EAAQzD,aAAeoD,EAAUpD,WAC3B,KAEDyD,KAGV,OACE,6BACGH,EAAMC,KAAI,SAAC5D,EAAK6D,GACf,OACE,cAAC,EAAD,CAEE7D,KAAMA,GADD6D,SCUFE,EA7BoD,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,YAG3EC,EAAe,IAAIxE,KAAKuE,EAAYD,EAAa,GAEjDG,EAAQ,YAAIxD,MP6BoB,SAACnB,EAAkBC,GACzD,IAAM2E,EAAWxE,EAAmBJ,EAAMC,GAEpC4E,EADY9E,EAAeC,EAAMC,GACC2E,EACxC,OAAO7B,KAAK+B,KAAKD,EAAsB,GOjCfE,CAAyBP,EAAaC,KAAeL,KAAI,WAC/E,IACMY,EAAW,CACff,UAF2B,IAAI/D,KAAKwE,EAAc9D,cAAc8D,EAAc7D,WAAW6D,EAAcvE,YAKzG,OADAuE,EAAcO,QAAQP,EAAcvE,UAAY,EAAII,EAAamE,IAC1DM,KAIT,OACE,wBAAOnB,UAAW,gBAAlB,UACE,gCACE,6BAjBO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAkB1CO,KAAI,SAAC/D,EAAIe,GAAL,OAAW,6BAAaf,GAAJe,UAGlC,gCACGuD,EAAMP,KAAI,SAACc,EAAKb,GAAN,OAAgB,cAAC,EAAD,eAA2Ba,GAAXb,YChBpCc,EAVsB,SAAC,GAAe,IAAbrB,EAAY,EAAZA,MAEtC,OACE,qBAAKD,UAAU,SAAf,SACE,6BAAKC,O,OCsBIsB,EAjBA,WACb,IAAM7B,EAAQ,IAAIrD,KACZmF,EAAmBC,cACnBtF,EAAQuF,SAASF,EAAOrF,QAAS,EAAIuF,SAASF,EAAOrF,OAAO,EAAGuD,EAAM1C,WACrEZ,EAAOsF,SAASF,EAAOpF,OAASsD,EAAM3C,cAE5C,OACE,sBAAKiD,UAAU,YAAf,UACE,cAAC,EAAD,CAAQC,MAAM,mBACd,cAAC,EAAD,UACE,cAAC,EAAD,CAAUU,aAAcxE,EAAsByE,YAAaxE,U,QCfnEuF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAI,gBAAiB,KAAMC,UAAWT,QAG9DU,SAASC,eAAe,W","file":"static/js/main.3e1f4c81.chunk.js","sourcesContent":["import { Day, DayNumber, MonthNumber, PossibleWeekNumber } from '../Types/types'\n\n/**\n * @param month javascript month int ie. january is 0 and so on\n * @param year year- number ofdays in  isdiffernt on leap year\n * @returns number of days inamonth\n */\nexport const getDaysInMonth = (month:MonthNumber ,year: number ):number => {\n  const newDate = new Date(year,month+1,0)\n  return newDate.getDate()\n}\n\n/**\n * @param month javascript month int ie. january is 0 and so on\n * @param year year- number ofdays in  isdiffernt on leap year\n * @returns number daynumber 0 being Munday\n */\nexport const getFirstDayOfMonth = (month:MonthNumber,year:number):DayNumber => {\n  const newDate = new Date(year,month,1)\n  const day = newDate.getDay() -1 //Shifting daynumber so monday is 0 and so on\n  if( day=== -1) return 6 //If day is sunday\n  return day as DayNumber\n}\n\n/**\n * @param date Date Object\n * @returns number  daynumber 0 being Munday, first day of the week for the date\n */\nexport const getDayNumber = (date:Date):DayNumber => {\n  const day = date.getDay() -1 //Shifting daynumber so monday is 0 and so on\n  if( day=== -1) return 6 //If day is sunday\n  return day as DayNumber\n}\n\n/**\n * @param month javascript month int ie. january is 0 and so on\n * @param year year- number ofdays in  isdiffernt on leap year\n * @returns number - number of weeks that the month spans 4 5 or 6\n */\nexport const getTotalWeekSpanForMonth = (month:MonthNumber,year:number): PossibleWeekNumber => {\n  const firstDay = getFirstDayOfMonth(month,year)\n  const totalDays = getDaysInMonth(month,year)\n  const cellsVisbleinCalender = totalDays+firstDay\n  return Math.ceil(cellsVisbleinCalender/7) as PossibleWeekNumber\n}\n\n/**\n *\n * @param date Date Object\n * @returns boolean if the given date same day as today\n */\nexport const isToday = (date:Date):boolean => {\n  const today = new Date()\n  return isDateEqual(today,date)\n}\n\n/**\n *\n * @param day String of Day type ex 'MONDAY'\n * @returns number daynumber 0 being Munday\n */\nexport const getDayNumberFromString = (day:Day):DayNumber => {\n  const days = ['MONDAY' , 'TUESDAY' , 'WEDNESDAY' , 'THURSDAY' , 'FRIDAY' , 'SATURDAY' , 'SUNDAY']\n  return days.indexOf(day.toUpperCase()) as DayNumber\n}\n\n/**\n * @param date1 Date Object\n *  @param date2 Date Object\n * @returns boolean if the given date(only dates not time) are equal\n */\nexport const isDateEqual = (date1:Date,date2:Date):boolean => {\n  if(!(date1 instanceof Date && date2 instanceof Date)) return false\n  if(date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate()){\n    return true\n  }\n  return false\n}\n\n/**\n * @param date Date Object\n *  @param date2 Date Object\n * @returns treatment week number 0 if week does not start on Mon\n */\nexport const getTreatmentWeekNumber = (date:Date):number => {\n  const monthstartDay = getFirstDayOfMonth(date.getMonth() as MonthNumber,date.getFullYear())\n  const prependDays = monthstartDay || 7 -1\n  const calc =Math.trunc((prependDays +date.getDate())/7)\n  return calc\n\n\n}\n","import { Calender, CalenderAction, MonthNumber, Program, Store } from '../Types/types'\nimport { getDaysInMonth } from '../Utils/dateHelper'\nexport const ADD_TO_CALENDER = 'ADD_TO_CALENDER'\n\nconst addToCalender = (calender:Calender, payload:{ date: Date, data: Program } ): Calender => {\n\n  const year =  payload.date.getFullYear()\n  const month = payload.date.getMonth() as MonthNumber\n  const date = payload.date.getDate()\n  const dateIndex = date-1\n\n  /**Initailize calender data if it is not initalized */\n  if(!calender[year]) calender[year] = {}\n  if(!calender[year][month])  calender[year][month] = [...new Array(getDaysInMonth(month,year))]\n\n  for(let i= dateIndex; i <= calender[year][month].length; i++ ){ //Iterate forward from current date positon\n\n    if(!calender[year][month][i]){  //If the date incurrent position doesnot have any data insert to this positon and break\n      calender[year][month][i] = payload.data\n      break\n    }\n\n    if(JSON.stringify(calender[year][month][i]) === JSON.stringify(payload.data) ){ //If the calender data in current positon is same as payload data than noneed to insert duplicate data -break\n      break\n    }\n\n  }\n  return calender\n}\n\nconst reducer = (state:Store , action : CalenderAction ) : Store => {\n  switch(action.type){\n  case ADD_TO_CALENDER:\n    return ({ ...state, calender: addToCalender({ ...state.calender }, action.payload) })\n  default:\n    return state\n  }\n}\nexport default reducer\n\n\n","import React, { useReducer, createContext, FC, Dispatch, useMemo } from 'react'\nimport { Store, CalenderAction, Calender, WeeklyData  } from '../Types/types'\nimport reducer from '../Reducer/reducer'\nimport data from './data.json'\n\n\nconst newTypedData:WeeklyData = {}\nconst typedData = Object.assign(data,newTypedData) //TypeCast JSON data\n\nconst initialState:{calender:Calender, data: WeeklyData} = { calender: {} , data:typedData   } // we can also write reducer function for data but since it is hardcoded we leave this step\n\nexport const StoreContext = createContext<[Store, Dispatch<CalenderAction>]>([\n  initialState,\n  () => initialState\n])\n\nexport type ProviderValue = [Store, Dispatch<CalenderAction>]\n\nexport const DataProvider: FC = ({ children }) => {\n  const [state, dispatch] = useReducer ( reducer, initialState)\n  const memoisedStore = useMemo<ProviderValue>(() => [state, dispatch], [state])\n  return (\n    <StoreContext.Provider value ={memoisedStore}>\n      {children}\n    </StoreContext.Provider>\n  )\n}\n\n","import React, { FC, useEffect } from 'react'\nimport { getDayNumber, getDayNumberFromString, getTreatmentWeekNumber, isToday } from '../../Utils/dateHelper'\nimport { Day, MonthNumber, WeeklyDataKey } from '../../Types/types'\nimport { useDataProvider } from '../../Context/useDataProvider'\nimport { updateToCalender } from '../../Reducer/actions'\n\nconst DateCell:FC<{date:Date | null }> = ({ date }) => {\n  const [state,dispatch] = useDataProvider()\n\n  useEffect(() => {\n    if(!date){\n      return\n    }\n    const treatmentWeekNumber = getTreatmentWeekNumber(date)\n    const weeklyData =\n      state['data'] &&\n      state['data']['week'+treatmentWeekNumber as WeeklyDataKey]\n\n    if(weeklyData && date){\n      weeklyData.forEach( data => {\n        if( getDayNumberFromString(data.weekday as Day) !== getDayNumber(date)) { //If the current day is not same as data day skip\n          return\n        }\n        dispatch(updateToCalender(date,data))\n      })\n    }\n\n  },[date])\n\n  const data = date\n    && state['calender'][date.getFullYear()]\n    && state['calender'][date.getFullYear()][date.getMonth() as MonthNumber]\n    && state['calender'][date.getFullYear()][date.getMonth() as MonthNumber][date.getDate()-1]\n\n  const istoday = isToday(date)\n\n  return (\n    <td className = {`dateCell ${istoday? 'dateCellToday': ''} ${data?'dateCellHasActivity':''}`}>\n      {date &&\n      <div>\n        <h2>{ date.getDate()}</h2>\n        <h3 className = {!istoday? 'pureBlack' : 'white'}>{data && data.title.toLocaleUpperCase()}</h3>\n      </div>\n      }\n    </td>\n  )\n}\n\nexport default DateCell","import { useContext } from 'react'\nimport { StoreContext } from './DataProvider'\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useDataProvider = () => useContext(StoreContext)","import { CalenderAction, Program } from '../Types/types'\nimport { ADD_TO_CALENDER } from './reducer'\n\ntype DataPayload = {\n  data:Program,\n  date:Date\n}\n\nexport const updateToCalender = (date:Date,data:Program) : CalenderAction => {\n  const today =new Date()\n  const payload : DataPayload =  { date,data }\n  if(!data.completed && date.getTime() < today.getTime() && date.getMonth() === today.getMonth() &&  date.getFullYear() === today.getFullYear()){\n    // If action is not completed for the day and action is on past but on this month\n    //(month/year check is implemented to prevent action shifting to currentMonth if the initalized month is not current month)\n    payload.date = today\n  }\n  return ({\n    type:ADD_TO_CALENDER,\n    payload: payload\n  })\n\n}","import React, { FC } from 'react'\nimport { getDayNumber } from '../../Utils/dateHelper'\nimport DateCell from './DateCell'\n\nconst WeekRow:FC<{startDate:Date}> = ({ startDate }) => {\n\n  const startDay = getDayNumber(startDate)\n\n  //Store each day for a week\n  const dates = [...Array(7)].map((date,index) => {\n    const newDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()+index-startDay)\n\n    // If day does not belong to current month then return null\n    if(newDate.getMonth() !== startDate.getMonth()) {\n      return null\n    }\n    return  newDate\n  })\n\n  return (\n    <tr>\n      {dates.map((date,index) => {\n        return(\n          <DateCell\n            key={index}\n            date={date}\n\n          />\n        )\n\n      })}\n    </tr>)\n\n}\n\nexport default WeekRow","import React, { FC } from 'react'\nimport { MonthNumber } from '../../Types/types'\nimport { getDayNumber, getTotalWeekSpanForMonth } from '../../Utils/dateHelper'\nimport WeekRow from './WeekRow'\n\nconst Calender:FC<{currentMonth:MonthNumber,currentYear:number}> = ({ currentMonth,currentYear }) => {\n  const days = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT' ,'SUN']\n\n  const weekStartDate= new Date(currentYear,currentMonth,1) //First day of month\n  //Data per week\n  const weeks = [...Array(getTotalWeekSpanForMonth(currentMonth,currentYear))].map(() => {\n    const currentWeekStartDate = new Date(weekStartDate.getFullYear(),weekStartDate.getMonth(),weekStartDate.getDate())\n    const weekData = {\n      startDate: currentWeekStartDate,\n    }\n    weekStartDate.setDate(weekStartDate.getDate() + 7 - getDayNumber(weekStartDate))\n    return weekData\n  })\n\n\n  return(\n    <table className= 'calenderTable'>\n      <thead>\n        <tr>\n          {days.map((day,i) => <th key={i}>{day}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {weeks.map((week,index) => <WeekRow key = {index} {...week}></WeekRow>)}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Calender","import React, { FC } from 'react'\n\nconst Header:FC<{ title: string }> = ({ title }) => {\n\n  return (\n    <div className='header'>\n      <h1>{title}</h1>\n    </div>\n\n  )\n}\n\nexport default Header","import React, { FC } from 'react'\nimport Calender from './Components/Calender'\nimport Header from './Components/Header'\nimport { DataProvider } from './Context/DataProvider'\nimport { useParams } from 'react-router-dom'\nimport { MonthNumber } from './Types/types'\n\ntype URLparams = {\n  month?:string\n  year?:string\n}\nconst App:FC = () => {\n  const today = new Date()\n  const params:URLparams = useParams()\n  const month = parseInt(params.month) >=1 ? parseInt(params.month)-1: today.getMonth()\n  const year = parseInt(params.year) || today.getFullYear()\n\n  return (\n    <div className='container'>\n      <Header title='Weekly Program'></Header>\n      <DataProvider>\n        <Calender currentMonth={month as MonthNumber} currentYear={year}/>\n      </DataProvider>\n    </div>\n\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route exact path={['/','/:year/:month', '*']} component={App} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}